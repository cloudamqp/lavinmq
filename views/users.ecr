<%- pagename = "Users" -%>
<!DOCTYPE html>
<html lang="en">
  <head>
    <% render "head" %>
    <script type="module" src="js/layout.js"></script>
  </head>
  <body>
    <% render "header" %>
    <main>
      <section class="card">
        <div id="users-error"></div>
        <table id="users" class="table">
          <thead>
            <tr>
              <th data-sort-key="name">Name</th>
              <th data-sort-key="tags" class="left">Tags</th>
              <th class="left">Can access virtual hosts</th>
              <th>Has password</th>
            </tr>
          </thead>
          <tbody></tbody>
        </table>
      </section>
      <form method="put" id="createUser" class="form card">
        <h3>Add user</h3>
        <label>
          <span>Username</span>
          <input type="text" name="username" required>
        </label>
        <label>
          <span>Password</span>
          <input type="password" name="password">
        </label>
        <label>
          <span>Tags</span>
          <input type="text" name="tags">
        </label>
        <div id="dataTags" class="label">
          <a data-tag="administrator">Administrator</a> |
          <a data-tag="policymaker">Policymaker</a> |
          <a data-tag="monitoring">Monitoring</a> |
          <a data-tag="management">Management</a> |
          <a data-tag="impersonator">Impersonator</a> |
          <a data-tag="">None</a>
        </div>
        <button type="submit" class="btn-primary">Add user</button>
      </form>
    </main>
    <% render "footer" %>
    <script type="module">
      import * as HTTP from './js/http.js'
      import * as Helpers from './js/helpers.js'
      import * as Table from './js/table.js'
      import * as DOM from './js/dom.js'

      let usersTable = null
      HTTP.request('GET', 'api/permissions').then(permissions => {
        const tableOptions = {
          url: 'api/users',
          keyColumns: ['vhost', 'name'],
          interval: 0,
          pagination: true,
          columnSelector: true,
          search: true
        }
        usersTable = Table.renderTable('users', tableOptions, (tr, item, all) => {
          if (all) {
            const userLink = document.createElement('a')
            userLink.href = 'user?name=' + encodeURIComponent(item.name)
            userLink.textContent = item.name
            Table.renderCell(tr, 0, userLink)
          }
          const hasPassword = item.password_hash ? '●' : '○'
          const vhosts = permissions.filter(p => p.user === item.name).map(p => p.vhost).join(', ')
          Table.renderCell(tr, 1, item.tags)
          Table.renderCell(tr, 2, vhosts)
          Table.renderCell(tr, 3, hasPassword, 'center')
        })
      }).catch(e => {
        Table.toggleDisplayError(e.status === 401 ? 'Access refused: You need administrator role to see this view' : e.body)
      })

      document.querySelector('#createUser').addEventListener('submit', function (evt) {
        evt.preventDefault()
        const data = new window.FormData(this)
        const username = encodeURIComponent(data.get('username').trim())
        const url = 'api/users/' + username
        let toastText = `User created: '${username}'`
        const trs = document.querySelectorAll('#table tbody tr')
        trs.forEach((tr) =>  {
          if (username === tr.getAttribute('data-name')) {
            window.confirm(`Are you sure? This will update existing user: '${username}'`)
            toastText = `Upated existing user: '${username}'`
            if (data.get('tags') === "") { data.set('tags', tr.childNodes[1].textContent) }
          }
        })
        const body = {
          tags: data.get('tags')
        }
        if (data.get('password') != "") {
          body.password = data.get('password')
        }
        HTTP.request('PUT', url, { body })
          .then(() => {
            usersTable.fetchAndUpdate()
            DOM.toast(toastText)
            evt.target.reset()
          }).catch(HTTP.standardErrorHandler)
      })

      document.querySelector('#dataTags').onclick = e => {
        Helpers.argumentHelper('createUser', 'tags', e)
      }
    </script>
  </body>

</html>
